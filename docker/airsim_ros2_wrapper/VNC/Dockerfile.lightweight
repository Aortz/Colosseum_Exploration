# Optimized Dockerfile for AirSim ROS2 with VNC
# Removed: noVNC web interface, Firefox, full desktop environment

# Build stage for ROS and AirSim ROS2
FROM ros:humble AS ros-airsim-builder

SHELL ["/bin/bash", "-c"]

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV ROS_DISTRO=humble

# Install ROS2 dependencies (keep this section as-is)
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    python3-pip \
    python3-colcon-common-extensions \
    python3-vcstool \
    python3-rosdep \
    python3-rosinstall-generator \
    python3-wstool \
    wget \
    curl \
    netcat-openbsd \
    libpcl-dev \
    ros-humble-desktop \
    ros-humble-cv-bridge \
    ros-humble-image-transport \
    ros-humble-tf2-geometry-msgs \
    ros-humble-tf2-sensor-msgs \
    ros-humble-geographic-msgs \
    ros-humble-pcl-conversions \
    ros-humble-pcl-ros \
    ros-humble-geometry-msgs \
    ros-humble-sensor-msgs \
    ros-humble-std-msgs \
    ros-humble-nav-msgs \
    ros-humble-tf2 \
    ros-humble-tf2-ros \
    ros-humble-rclcpp \
    ros-humble-rclpy \
    ros-humble-builtin-interfaces \
    ros-humble-rosidl-default-generators \
    ros-humble-rosidl-default-runtime \
    && rm -rf /var/lib/apt/lists/*

# Try to install mavros-msgs if available
RUN apt-get update && \
    (apt-get install -y ros-humble-mavros-msgs || echo "mavros-msgs not available, continuing...") && \
    rm -rf /var/lib/apt/lists/*

# Initialize rosdep
RUN rosdep init || echo "rosdep already initialized" && \
    rosdep update

# Create workspace and build AirSim ROS2 (keep this section)
RUN mkdir -p /airsim_ros2_ws/src
WORKDIR /airsim_ros2_ws

# Copy AirSim ROS2 source files
COPY ../../ros2/ /airsim_ros2_ws/src/
COPY ../../cmake/ /airsim_ros2_ws/cmake/
COPY ../../AirLib/include/ /airsim_ros2_ws/AirLib/include/
COPY ../../AirLib/src/ /airsim_ros2_ws/AirLib/src/
COPY ../../AirLib/deps/ /airsim_ros2_ws/AirLib/deps/
COPY ../../MavLinkCom/src/ /airsim_ros2_ws/MavLinkCom/src/
COPY ../../MavLinkCom/include/ /airsim_ros2_ws/MavLinkCom/include/
COPY ../../MavLinkCom/common_utils/ /airsim_ros2_ws/MavLinkCom/common_utils/
COPY ../../MavLinkCom/mavlink/ /airsim_ros2_ws/MavLinkCom/mavlink/
COPY ../../external/rpclib/ /airsim_ros2_ws/external/rpclib/

# Create proper directory structure for cmake
RUN mkdir -p /airsim_ros2_ws/src/airsim && \
    ln -sf /airsim_ros2_ws/cmake /airsim_ros2_ws/src/airsim/cmake && \
    ln -sf /airsim_ros2_ws/AirLib /airsim_ros2_ws/src/airsim/AirLib && \
    ln -sf /airsim_ros2_ws/MavLinkCom /airsim_ros2_ws/src/airsim/MavLinkCom && \
    ln -sf /airsim_ros2_ws/external /airsim_ros2_ws/src/airsim/external

# Clean up problematic packages
RUN cd /airsim_ros2_ws/src && \
    find . -name "*python*" -path "*/src/*" -type d -exec rm -rf {} + || true && \
    find . -name "*uwb_msgs*" -type d -exec rm -rf {} + || true && \
    find . -name "*wifi_msgs*" -type d -exec rm -rf {} + || true

# Fix MavLinkTest issue
RUN sed -i 's/add_subdirectory("MavLinkTest")/#add_subdirectory("MavLinkTest")/' /airsim_ros2_ws/cmake/MavLinkCom/CMakeLists.txt || true

# Build the workspace
RUN /bin/bash -c "source /opt/ros/humble/setup.bash && \
    colcon build --symlink-install --packages-select airsim_interfaces airsim_ros_pkgs"

# Main stage - Minimal desktop environment
FROM ubuntu:jammy-20250404

SHELL ["/bin/bash", "-c"]

# Install minimal packages
RUN apt-get update -q && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        supervisor \
        tini \
        curl \
        wget \
        gnupg2 \
        lsb-release \
        ca-certificates \
        build-essential \
        vim \
        sudo \
        locales \
        bash-completion \
        tzdata \
        python3 \
        python3-pip \
        dos2unix && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Install minimal desktop environment with better VNC support
RUN apt-get update -q && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        xfce4 \
        xfce4-goodies \
        tigervnc-standalone-server \
        tigervnc-common \
        tigervnc-tools \
        dbus-x11 \
        x11-xserver-utils \
        x11-utils \
        xauth \
        xfonts-base \
        xfonts-75dpi \
        xfonts-100dpi \
        fonts-liberation \
        fonts-dejavu-core \
        openssh-server && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Configure dbus
RUN mkdir -p /var/run/dbus && \
    dbus-uuidgen > /etc/machine-id && \
    ln -sf /etc/machine-id /var/lib/dbus/machine-id

# Create X11 socket directory and set permissions
RUN mkdir -p /tmp/.X11-unix && \
    chmod 1777 /tmp/.X11-unix

# Add environment variables for X11 and VNC
ENV DISPLAY=:1
ENV VNC_PORT=5901
ENV RESOLUTION=1280x720

# Install ROS2 Humble
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        software-properties-common \
        curl && \
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        ros-humble-desktop \
        python3-rosdep \
        python3-colcon-common-extensions \
        python3-vcstool && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Initialize rosdep
RUN rosdep init || echo "rosdep already initialized" && \
    rosdep update

# Install VSCodium (keep your IDE)
RUN wget https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg \
    -O /usr/share/keyrings/vscodium-archive-keyring.asc && \
    echo 'deb [ signed-by=/usr/share/keyrings/vscodium-archive-keyring.asc ] https://paulcarroty.gitlab.io/vscodium-deb-rpm-repo/debs vscodium main' \
    | tee /etc/apt/sources.list.d/vscodium.list && \
    apt-get update -q && \
    apt-get install -y codium && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# Copy AirSim ROS2 workspace from builder stage
COPY --from=ros-airsim-builder /airsim_ros2_ws /airsim_ros2_ws

# Create ubuntu user FIRST
RUN useradd -m -s /bin/bash ubuntu && \
    echo 'ubuntu:ubuntu' | chpasswd && \
    usermod -aG sudo ubuntu && \
    echo 'ubuntu ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# THEN Setup VNC for ubuntu user (after user is created)
RUN su - ubuntu -c "mkdir -p ~/.vnc" && \
    su - ubuntu -c "echo 'ubuntu' | vncpasswd -f > ~/.vnc/passwd" && \
    su - ubuntu -c "chmod 600 ~/.vnc/passwd" && \
    su - ubuntu -c "echo '#!/bin/bash' > ~/.vnc/xstartup" && \
    su - ubuntu -c "echo 'unset SESSION_MANAGER' >> ~/.vnc/xstartup" && \
    su - ubuntu -c "echo 'unset DBUS_SESSION_BUS_ADDRESS' >> ~/.vnc/xstartup" && \
    su - ubuntu -c "echo 'export DISPLAY=:1' >> ~/.vnc/xstartup" && \
    su - ubuntu -c "echo 'xrdb \$HOME/.Xresources 2>/dev/null || true' >> ~/.vnc/xstartup" && \
    su - ubuntu -c "echo 'xsetroot -solid grey 2>/dev/null || true' >> ~/.vnc/xstartup" && \
    su - ubuntu -c "echo 'startxfce4 &' >> ~/.vnc/xstartup" && \
    su - ubuntu -c "echo 'wait' >> ~/.vnc/xstartup" && \
    su - ubuntu -c "chmod +x ~/.vnc/xstartup" && \
    su - ubuntu -c "echo 'session=xfce' > ~/.vnc/config" && \
    su - ubuntu -c "echo 'geometry=1280x720' >> ~/.vnc/config" && \
    su - ubuntu -c "echo 'localhost=no' >> ~/.vnc/config" && \
    su - ubuntu -c "echo 'alwaysshared=yes' >> ~/.vnc/config"

# Setup ROS2 environment
RUN su - ubuntu -c "echo 'source /opt/ros/humble/setup.bash' >> ~/.bashrc" && \
    su - ubuntu -c "echo 'source /airsim_ros2_ws/install/setup.bash' >> ~/.bashrc"

# Set environment variables for ROS2
ENV ROS_DISTRO=humble
ENV ROS_VERSION=2
ENV PYTHONPATH=/opt/ros/humble/lib/python3.10/site-packages:/airsim_ros2_ws/install/airsim_interfaces/lib/python3.10/site-packages:/airsim_ros2_ws/install/airsim_ros_pkgs/lib/python3.10/site-packages:$PYTHONPATH
ENV PATH=/opt/ros/humble/bin:/airsim_ros2_ws/install/airsim_ros_pkgs/bin:$PATH
ENV LD_LIBRARY_PATH=/opt/ros/humble/lib:/airsim_ros2_ws/install/airsim_interfaces/lib:/airsim_ros2_ws/install/airsim_ros_pkgs/lib:$LD_LIBRARY_PATH
ENV CMAKE_PREFIX_PATH=/opt/ros/humble:/airsim_ros2_ws/install/airsim_interfaces:/airsim_ros2_ws/install/airsim_ros_pkgs:$CMAKE_PREFIX_PATH

# Create launch script (keep this for easy AirSim launching)
RUN echo '#!/bin/bash' > /launch_airsim_ros2.sh && \
    echo 'echo "Starting AirSim ROS2 Wrapper..."' >> /launch_airsim_ros2.sh && \
    echo 'source /opt/ros/humble/setup.bash' >> /launch_airsim_ros2.sh && \
    echo 'source /airsim_ros2_ws/install/setup.bash' >> /launch_airsim_ros2.sh && \
    echo 'export ROS_DOMAIN_ID=${ROS_DOMAIN_ID:-0}' >> /launch_airsim_ros2.sh && \
    echo 'export AIRSIM_HOST_IP=${AIRSIM_HOST_IP:-host.docker.internal}' >> /launch_airsim_ros2.sh && \
    echo 'export AIRSIM_HOST_PORT=${AIRSIM_HOST_PORT:-41451}' >> /launch_airsim_ros2.sh && \
    echo 'export LAUNCH_RVIZ=${LAUNCH_RVIZ:-false}' >> /launch_airsim_ros2.sh && \
    echo 'echo "Configuration:"' >> /launch_airsim_ros2.sh && \
    echo 'echo "  ROS_DOMAIN_ID: $ROS_DOMAIN_ID"' >> /launch_airsim_ros2.sh && \
    echo 'echo "  AirSim Host: $AIRSIM_HOST_IP:$AIRSIM_HOST_PORT"' >> /launch_airsim_ros2.sh && \
    echo 'echo "  Launch RViz2: $LAUNCH_RVIZ"' >> /launch_airsim_ros2.sh && \
    echo 'if [ "$LAUNCH_RVIZ" = "true" ]; then' >> /launch_airsim_ros2.sh && \
    echo '  ros2 launch airsim_ros_pkgs airsim_node.launch.py host_ip:=$AIRSIM_HOST_IP host_port:=$AIRSIM_HOST_PORT enable_api_control:=true output:=screen &' >> /launch_airsim_ros2.sh && \
    echo '  sleep 5' >> /launch_airsim_ros2.sh && \
    echo '  ros2 launch airsim_ros_pkgs rviz.launch.py &' >> /launch_airsim_ros2.sh && \
    echo '  wait' >> /launch_airsim_ros2.sh && \
    echo 'else' >> /launch_airsim_ros2.sh && \
    echo '  ros2 launch airsim_ros_pkgs airsim_node.launch.py host_ip:=$AIRSIM_HOST_IP host_port:=$AIRSIM_HOST_PORT enable_api_control:=true output:=screen' >> /launch_airsim_ros2.sh && \
    echo 'fi' >> /launch_airsim_ros2.sh && \
    chmod +x /launch_airsim_ros2.sh

# Make launch script accessible
RUN chown ubuntu:ubuntu /launch_airsim_ros2.sh

# Expose only VNC port (removed noVNC port)
EXPOSE 5901 7400/udp 7401/udp 7402/udp

# Set environment
ENV USER=ubuntu
ENV PASSWD=ubuntu
ENV ROS_DISTRO=humble

# Copy simplified entrypoint
COPY ./docker/airsim_ros2_wrapper/VNC/entrypoint_lightweight.sh /
RUN dos2unix /entrypoint_lightweight.sh && chmod +x /entrypoint_lightweight.sh

# Copy debug script
COPY ./docker/airsim_ros2_wrapper/VNC/debug_airsim_connection.sh /debug_airsim_connection.sh
RUN dos2unix /debug_airsim_connection.sh && chmod +x /debug_airsim_connection.sh

ENTRYPOINT ["/entrypoint_lightweight.sh"]