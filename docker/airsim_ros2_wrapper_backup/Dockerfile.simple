# AirSim ROS2 Wrapper Docker Container - Simple Version (No rosdep)
FROM ros:humble

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV ROS_DISTRO=humble

# Install all dependencies manually (no rosdep)
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    python3-pip \
    python3-colcon-common-extensions \
    python3-vcstool \
    wget \
    curl \
    netcat-openbsd \
    libpcl-dev \
    ros-humble-desktop \
    ros-humble-cv-bridge \
    ros-humble-image-transport \
    ros-humble-tf2-geometry-msgs \
    ros-humble-tf2-sensor-msgs \
    ros-humble-geographic-msgs \
    ros-humble-pcl-conversions \
    ros-humble-pcl-ros \
    ros-humble-geometry-msgs \
    ros-humble-sensor-msgs \
    ros-humble-std-msgs \
    ros-humble-nav-msgs \
    ros-humble-tf2 \
    ros-humble-tf2-ros \
    ros-humble-rclcpp \
    ros-humble-rclpy \
    ros-humble-builtin-interfaces \
    ros-humble-rosidl-default-generators \
    ros-humble-rosidl-default-runtime \
    && rm -rf /var/lib/apt/lists/*

# Try to install mavros-msgs if available
RUN apt-get update && \
    (apt-get install -y ros-humble-mavros-msgs || echo "mavros-msgs not available, continuing...") && \
    rm -rf /var/lib/apt/lists/*

# Create workspace
RUN mkdir -p /airsim_ros2_ws/src
WORKDIR /airsim_ros2_ws

# Copy only essential files for AirSim ROS2 (dramatically reduces context size)
COPY ../../ros2/ /airsim_ros2_ws/src/
COPY ../../cmake/ /airsim_ros2_ws/cmake/
COPY ../../AirLib/include/ /airsim_ros2_ws/AirLib/include/
COPY ../../AirLib/src/ /airsim_ros2_ws/AirLib/src/
COPY ../../AirLib/deps/ /airsim_ros2_ws/AirLib/deps/
COPY ../../MavLinkCom/src/ /airsim_ros2_ws/MavLinkCom/src/
COPY ../../MavLinkCom/include/ /airsim_ros2_ws/MavLinkCom/include/
COPY ../../MavLinkCom/common_utils/ /airsim_ros2_ws/MavLinkCom/common_utils/
COPY ../../MavLinkCom/mavlink/ /airsim_ros2_ws/MavLinkCom/mavlink/
COPY ../../external/rpclib/ /airsim_ros2_ws/external/rpclib/

# Create proper directory structure for cmake
RUN mkdir -p /airsim_ros2_ws/src/airsim && \
    ln -sf /airsim_ros2_ws/cmake /airsim_ros2_ws/src/airsim/cmake && \
    ln -sf /airsim_ros2_ws/AirLib /airsim_ros2_ws/src/airsim/AirLib && \
    ln -sf /airsim_ros2_ws/MavLinkCom /airsim_ros2_ws/src/airsim/MavLinkCom && \
    ln -sf /airsim_ros2_ws/external /airsim_ros2_ws/src/airsim/external

# Remove problematic ROS packages but keep sensor headers
RUN cd /airsim_ros2_ws/src && \
    find . -name "*python*" -path "*/src/*" -type d -exec rm -rf {} + || true && \
    find . -name "*uwb_msgs*" -type d -exec rm -rf {} + || true && \
    find . -name "*wifi_msgs*" -type d -exec rm -rf {} + || true

# Fix MavLinkTest issue by commenting it out in cmake
RUN sed -i 's/add_subdirectory("MavLinkTest")/#add_subdirectory("MavLinkTest")/' /airsim_ros2_ws/cmake/MavLinkCom/CMakeLists.txt

# Build the workspace (no rosdep, just build essential packages)
RUN /bin/bash -c "source /opt/ros/humble/setup.bash && \
    colcon build --symlink-install --packages-select airsim_interfaces airsim_ros_pkgs"

# Setup environment for both interactive and non-interactive shells
RUN echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc && \
    echo "source /airsim_ros2_ws/install/setup.bash" >> ~/.bashrc && \
    echo "source /opt/ros/humble/setup.bash" >> ~/.profile && \
    echo "source /airsim_ros2_ws/install/setup.bash" >> ~/.profile

# Create global ROS2 environment setup
RUN echo '#!/bin/bash\nsource /opt/ros/humble/setup.bash\nsource /airsim_ros2_ws/install/setup.bash\nexec "$@"' > /ros2_entrypoint.sh && \
    chmod +x /ros2_entrypoint.sh

# Set environment variables for ROS2
ENV ROS_DISTRO=humble
ENV ROS_VERSION=2
ENV PYTHONPATH=/opt/ros/humble/lib/python3.10/site-packages:/airsim_ros2_ws/install/airsim_interfaces/lib/python3.10/site-packages:/airsim_ros2_ws/install/airsim_ros_pkgs/lib/python3.10/site-packages:$PYTHONPATH
ENV PATH=/opt/ros/humble/bin:/airsim_ros2_ws/install/airsim_ros_pkgs/bin:$PATH
ENV LD_LIBRARY_PATH=/opt/ros/humble/lib:/airsim_ros2_ws/install/airsim_interfaces/lib:/airsim_ros2_ws/install/airsim_ros_pkgs/lib:$LD_LIBRARY_PATH
ENV CMAKE_PREFIX_PATH=/opt/ros/humble:/airsim_ros2_ws/install/airsim_interfaces:/airsim_ros2_ws/install/airsim_ros_pkgs:$CMAKE_PREFIX_PATH

# Create enhanced launch script with RViz2 support
RUN echo '#!/bin/bash' > /launch_airsim_ros2.sh && \
    echo 'echo "Starting AirSim ROS2 Wrapper..."' >> /launch_airsim_ros2.sh && \
    echo 'source /opt/ros/humble/setup.bash' >> /launch_airsim_ros2.sh && \
    echo 'source /airsim_ros2_ws/install/setup.bash' >> /launch_airsim_ros2.sh && \
    echo 'export ROS_DOMAIN_ID=${ROS_DOMAIN_ID:-0}' >> /launch_airsim_ros2.sh && \
    echo 'export AIRSIM_HOST_IP=${AIRSIM_HOST_IP:-host.docker.internal}' >> /launch_airsim_ros2.sh && \
    echo 'export AIRSIM_HOST_PORT=${AIRSIM_HOST_PORT:-41451}' >> /launch_airsim_ros2.sh && \
    echo 'export LAUNCH_RVIZ=${LAUNCH_RVIZ:-false}' >> /launch_airsim_ros2.sh && \
    echo 'echo "Configuration:"' >> /launch_airsim_ros2.sh && \
    echo 'echo "  ROS_DOMAIN_ID: $ROS_DOMAIN_ID"' >> /launch_airsim_ros2.sh && \
    echo 'echo "  AirSim Host: $AIRSIM_HOST_IP:$AIRSIM_HOST_PORT"' >> /launch_airsim_ros2.sh && \
    echo 'echo "  Launch RViz2: $LAUNCH_RVIZ"' >> /launch_airsim_ros2.sh && \
    echo 'echo "  API Control: Enabled"' >> /launch_airsim_ros2.sh && \
    echo 'if [ "$LAUNCH_RVIZ" = "true" ]; then' >> /launch_airsim_ros2.sh && \
    echo '  echo "Launching AirSim ROS2 node with RViz2..."' >> /launch_airsim_ros2.sh && \
    echo '  ros2 launch airsim_ros_pkgs airsim_node.launch.py host_ip:=$AIRSIM_HOST_IP host_port:=$AIRSIM_HOST_PORT enable_api_control:=true output:=screen &' >> /launch_airsim_ros2.sh && \
    echo '  sleep 5' >> /launch_airsim_ros2.sh && \
    echo '  ros2 launch airsim_ros_pkgs rviz.launch.py &' >> /launch_airsim_ros2.sh && \
    echo '  wait' >> /launch_airsim_ros2.sh && \
    echo 'else' >> /launch_airsim_ros2.sh && \
    echo '  echo "Launching AirSim ROS2 node..."' >> /launch_airsim_ros2.sh && \
    echo '  ros2 launch airsim_ros_pkgs airsim_node.launch.py host_ip:=$AIRSIM_HOST_IP host_port:=$AIRSIM_HOST_PORT enable_api_control:=true output:=screen' >> /launch_airsim_ros2.sh && \
    echo 'fi' >> /launch_airsim_ros2.sh && \
    chmod +x /launch_airsim_ros2.sh

# Expose ROS2 DDS ports
EXPOSE 7400/udp 7401/udp 7402/udp

# Default command
CMD ["/launch_airsim_ros2.sh"]