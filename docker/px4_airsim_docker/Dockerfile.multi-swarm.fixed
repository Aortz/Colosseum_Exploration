# Multi-Swarm PX4 Docker Image for AirSim Integration
# Uses existing working PX4 image as base for faster builds

FROM px4_airsim_docker-px4-single:latest

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive

# Install additional utilities for multi-swarm support
RUN apt-get update && apt-get install -y --no-install-recommends \
    netcat-openbsd \
    procps \
    && rm -rf /var/lib/apt/lists/*

# Environment variables for multi-swarm support
ENV PX4_HOME_LAT=47.641468
ENV PX4_HOME_LON=-122.140165
ENV PX4_HOME_ALT=0.0
ENV PX4_SYS_AUTOSTART=10016

# Instance-specific variables (will be overridden by docker-compose or runtime)
ENV PX4_INSTANCE=1
ENV SWARM_ID=1
ENV SWARM_SIZE=1

# Create scripts with proper line endings
RUN echo '#!/bin/bash' > /Scripts/run_multi_swarm.sh && \
    echo '' >> /Scripts/run_multi_swarm.sh && \
    echo '# Multi-swarm PX4 startup script' >> /Scripts/run_multi_swarm.sh && \
    echo 'instance_num=${PX4_INSTANCE:-1}' >> /Scripts/run_multi_swarm.sh && \
    echo 'swarm_id=${SWARM_ID:-1}' >> /Scripts/run_multi_swarm.sh && \
    echo 'swarm_size=${SWARM_SIZE:-1}' >> /Scripts/run_multi_swarm.sh && \
    echo '' >> /Scripts/run_multi_swarm.sh && \
    echo '# Calculate unique ports based on swarm ID and instance number' >> /Scripts/run_multi_swarm.sh && \
    echo '# AirSim TCP: swarm-1 uses 4561+, swarm-2 uses 4571+, etc.' >> /Scripts/run_multi_swarm.sh && \
    echo 'airsim_tcp_port=$((4560 + (swarm_id - 1) * 10 + instance_num))' >> /Scripts/run_multi_swarm.sh && \
    echo 'qgc_port=$((14550 + (swarm_id - 1) * 10 + instance_num - 1))' >> /Scripts/run_multi_swarm.sh && \
    echo 'mavlink_udp_port=$((18570 + (swarm_id - 1) * 10 + instance_num - 1))' >> /Scripts/run_multi_swarm.sh && \
    echo 'mavlink_tcp_port=$((4560 + (swarm_id - 1) * 10 + instance_num + 100))' >> /Scripts/run_multi_swarm.sh && \
    echo '' >> /Scripts/run_multi_swarm.sh && \
    echo 'echo "🚁 Starting PX4 SITL - Swarm Configuration"' >> /Scripts/run_multi_swarm.sh && \
    echo 'echo "   Swarm ID: $swarm_id, Instance: $instance_num"' >> /Scripts/run_multi_swarm.sh && \
    echo 'echo "   AirSim TCP: $airsim_tcp_port, QGC UDP: $qgc_port, MAVLink UDP: $mavlink_udp_port"' >> /Scripts/run_multi_swarm.sh && \
    echo '' >> /Scripts/run_multi_swarm.sh && \
    echo '# PX4 paths' >> /Scripts/run_multi_swarm.sh && \
    echo 'PARENT_DIR="/px4_workspace/PX4-Autopilot"' >> /Scripts/run_multi_swarm.sh && \
    echo 'BUILD_DIR=$PARENT_DIR/ROMFS/px4fmu_common' >> /Scripts/run_multi_swarm.sh && \
    echo 'instance_path=$PARENT_DIR/build/px4_sitl_default' >> /Scripts/run_multi_swarm.sh && \
    echo 'BIN_DIR=$PARENT_DIR/build/px4_sitl_default/bin/px4' >> /Scripts/run_multi_swarm.sh && \
    echo '' >> /Scripts/run_multi_swarm.sh && \
    echo '# Use none_iris model for external simulators' >> /Scripts/run_multi_swarm.sh && \
    echo 'export PX4_SIM_MODEL=none_iris' >> /Scripts/run_multi_swarm.sh && \
    echo 'export PX4_SIMULATOR=none' >> /Scripts/run_multi_swarm.sh && \
    echo '' >> /Scripts/run_multi_swarm.sh && \
    echo '# Check if PX4 binary exists' >> /Scripts/run_multi_swarm.sh && \
    echo 'if [ ! -f "$BIN_DIR" ]; then' >> /Scripts/run_multi_swarm.sh && \
    echo '    echo "❌ PX4 binary not found at: $BIN_DIR"' >> /Scripts/run_multi_swarm.sh && \
    echo '    exit 1' >> /Scripts/run_multi_swarm.sh && \
    echo 'fi' >> /Scripts/run_multi_swarm.sh && \
    echo '' >> /Scripts/run_multi_swarm.sh && \
    echo '# Create instance working directory' >> /Scripts/run_multi_swarm.sh && \
    echo 'working_dir="$instance_path/swarm_${swarm_id}/instance_$instance_num"' >> /Scripts/run_multi_swarm.sh && \
    echo '[ ! -d "$working_dir" ] && mkdir -p "$working_dir"' >> /Scripts/run_multi_swarm.sh && \
    echo 'echo "Working directory: $working_dir"' >> /Scripts/run_multi_swarm.sh && \
    echo '' >> /Scripts/run_multi_swarm.sh && \
    echo '# Configure MAVLink for this instance' >> /Scripts/run_multi_swarm.sh && \
    echo 'export MAV_0_UDP_PORT=$mavlink_udp_port' >> /Scripts/run_multi_swarm.sh && \
    echo 'export MAV_0_REMOTE_PORT=$qgc_port' >> /Scripts/run_multi_swarm.sh && \
    echo 'export MAV_1_TCP_PORT=$mavlink_tcp_port' >> /Scripts/run_multi_swarm.sh && \
    echo '' >> /Scripts/run_multi_swarm.sh && \
    echo '# Change to working directory' >> /Scripts/run_multi_swarm.sh && \
    echo 'cd "$working_dir"' >> /Scripts/run_multi_swarm.sh && \
    echo '' >> /Scripts/run_multi_swarm.sh && \
    echo '# Start PX4 with instance-specific configuration' >> /Scripts/run_multi_swarm.sh && \
    echo 'echo "🚀 Starting PX4 process..."' >> /Scripts/run_multi_swarm.sh && \
    echo 'exec $BIN_DIR -i $instance_num $BUILD_DIR -s "etc/init.d-posix/rcS" -t $PARENT_DIR/test_data' >> /Scripts/run_multi_swarm.sh

# Create health check script
RUN echo '#!/bin/bash' > /Scripts/swarm_health_check.sh && \
    echo 'echo "🔍 Swarm Health Check - Swarm $SWARM_ID, Instance $PX4_INSTANCE"' >> /Scripts/swarm_health_check.sh && \
    echo 'if pgrep -f "px4" > /dev/null; then' >> /Scripts/swarm_health_check.sh && \
    echo '    echo "✅ PX4 process is running"' >> /Scripts/swarm_health_check.sh && \
    echo '    exit 0' >> /Scripts/swarm_health_check.sh && \
    echo 'else' >> /Scripts/swarm_health_check.sh && \
    echo '    echo "❌ PX4 process not found"' >> /Scripts/swarm_health_check.sh && \
    echo '    exit 1' >> /Scripts/swarm_health_check.sh && \
    echo 'fi' >> /Scripts/swarm_health_check.sh

# Make all scripts executable
RUN chmod +x /Scripts/*.sh

# Create convenient aliases
RUN echo 'alias swarm-status="/Scripts/swarm_health_check.sh"' >> /root/.bashrc

# Expose port ranges for multi-swarm configurations
EXPOSE 4500-5500/tcp 14550-14650/udp 18570-18670/udp

# Add healthcheck for container monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /Scripts/swarm_health_check.sh || exit 1

# Set the working directory
WORKDIR /px4_workspace/PX4-Autopilot

# Default command supports both legacy and new multi-swarm modes
CMD ["/bin/bash", "-c", "if [ -n \"$SWARM_ID\" ]; then /Scripts/run_multi_swarm.sh; else /Scripts/run_airsim_sitl_final.sh ${PX4_INSTANCE}; fi"]